/******************************************************************************
 * Copyright 2009-2018 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by CoffeeScript 1.3.3
(function() {
  var AbstractMessage, CloseRequest, EventUpdateRequest, MatrixUpdateRequest, MessageFactory, NotifyRequest, PollingRequest, ScriptrunnerUpdateRequest, ServiceUpdateRequest, MessagesUpdateRequest, root, _MessageFactory, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.exactpro = (_ref = root.exactpro) != null ? _ref : {};

  AbstractMessage = (function() {

    function AbstractMessage(_messageType) {
      this.messageType = _messageType;
    }

    return AbstractMessage;

  })();

  PollingRequest = (function(_super) {

    __extends(PollingRequest, _super);

    function PollingRequest() {
      PollingRequest.__super__.constructor.call(this, "PollingRequest");
    }

    return PollingRequest;

  })(AbstractMessage);

  NotifyRequest = (function(_super) {

    __extends(NotifyRequest, _super);

    function NotifyRequest(_requestId) {
      NotifyRequest.__super__.constructor.call(this, "NotifyRequest");
      this.requestId = _requestId;
    }

    return NotifyRequest;

  })(AbstractMessage);

  ScriptrunnerUpdateRequest = (function(_super) {

    __extends(ScriptrunnerUpdateRequest, _super);

    function ScriptrunnerUpdateRequest(_requestId) {
      ScriptrunnerUpdateRequest.__super__.constructor.call(this, "ScriptrunnerUpdateRequest");
      this.requestId = _requestId;
    }

    return ScriptrunnerUpdateRequest;

  })(AbstractMessage);

  MatrixUpdateRequest = (function(_super) {

    __extends(MatrixUpdateRequest, _super);

    function MatrixUpdateRequest(_requestId) {
      MatrixUpdateRequest.__super__.constructor.call(this, "MatrixUpdateRequest");
      this.requestId = _requestId;
    }

    return MatrixUpdateRequest;

  })(AbstractMessage);

  ServiceUpdateRequest = (function(_super) {

    __extends(ServiceUpdateRequest, _super);

    function ServiceUpdateRequest(_requestId) {
      ServiceUpdateRequest.__super__.constructor.call(this, "ServiceUpdateRequest");
      this.requestId = _requestId;
    }

    return ServiceUpdateRequest;

  })(AbstractMessage);

  MessagesUpdateRequest = (function(_super) {

    __extends(MessagesUpdateRequest, _super);

    function MessagesUpdateRequest(_requestId) {
      MessagesUpdateRequest.__super__.constructor.call(this, "MessagesUpdateRequest");
      this.requestId = _requestId;
    }

    return MessagesUpdateRequest;

  })(AbstractMessage);

  EventUpdateRequest = (function(_super) {

    __extends(EventUpdateRequest, _super);

    function EventUpdateRequest(_requestId) {
      EventUpdateRequest.__super__.constructor.call(this, "EventUpdateRequest");
      this.requestId = _requestId;
    }

    return EventUpdateRequest;

  })(AbstractMessage);

  CloseRequest = (function(_super) {

    __extends(CloseRequest, _super);

    function CloseRequest(_requestId) {
      CloseRequest.__super__.constructor.call(this, "CloseRequest");
      this.requestId = _requestId;
    }

    return CloseRequest;

  })(AbstractMessage);

  root.exactpro.MessageFactory = MessageFactory = (function() {
    var instance;

    function MessageFactory() {}

    instance = null;

    MessageFactory.get = function() {
      return instance != null ? instance : instance = new _MessageFactory;
    };

    return MessageFactory;

  })();

  _MessageFactory = (function() {

    function _MessageFactory() {}

    _MessageFactory.prototype.createPollingRequest = function() {
      return new PollingRequest();
    };

    _MessageFactory.prototype.createNotifyRequest = function(requestId) {
      if (requestId == null) {
        requestId = root.exactpro.Util.get().generateId();
      }
      return new NotifyRequest(requestId);
    };

    _MessageFactory.prototype.createScriptrunnerUpdateRequest = function(requestId) {
      if (requestId == null) {
        requestId = root.exactpro.Util.get().generateId();
      }
      return new ScriptrunnerUpdateRequest(requestId);
    };

    _MessageFactory.prototype.createMatrixUpdateRequest = function(requestId) {
      if (requestId == null) {
        requestId = root.exactpro.Util.get().generateId();
      }
      return new MatrixUpdateRequest(requestId);
    };

    _MessageFactory.prototype.createServiceUpdateRequest = function(requestId) {
      if (requestId == null) {
        requestId = root.exactpro.Util.get().generateId();
      }
      return new ServiceUpdateRequest(requestId);
    };

    _MessageFactory.prototype.createMessagesUpdateRequest = function(requestId) {
      if (requestId == null) {
        requestId = root.exactpro.Util.get().generateId();
      }
      return new MessagesUpdateRequest(requestId);
    };

    _MessageFactory.prototype.createEventUpdateRequest = function(requestId) {
      if (requestId == null) {
        requestId = root.exactpro.Util.get().generateId();
      }
      return new EventUpdateRequest(requestId);
    };

    _MessageFactory.prototype.createCloseRequest = function(requestId) {
      if (requestId == null) {
        requestId = root.exactpro.Util.get().generateId();
      }
      return new CloseRequest(requestId);
    };

    return _MessageFactory;

  })();

}).call(this);
