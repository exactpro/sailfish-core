/******************************************************************************
 * Copyright 2009-2019 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
 
 /*	To get production build files, run './gradlew build'.
*	Files will be located at build folder (index.html and bundle.js)
*/

import org.gradle.api.internal.file.IdentityFileResolver
import org.gradle.api.java.archives.internal.DefaultManifest

buildscript {
  repositories {
      maven {
          name 'MavenLocal' // for local builds only
          url '../../shared'
      }
      jcenter()
  }
  dependencies {
      classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
      classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
  }
}

plugins {
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'maven'
apply plugin: 'com.moowork.node'
apply plugin: 'com.jfrog.artifactory'

ext {
    sailfishVersion         = "${sailfish_version_major}.${sailfish_version_minor}"
    artifactVersion         = "${sailfishVersion}-SNAPSHOT"
    sailfishCoreVersion		= "${sailfishVersion}" //.${sailfish_version_maintenance}"
    artifactCoreVersion     = build_mode == 'snapshot' ? "${sailfishCoreVersion}-SNAPSHOT" : sailfishCoreVersion

    node_modules    = file("node_modules")
    npmPackageInfo  = file("package.json")
    npmDir          = file("${project.buildDir}/nodejs")

    sharedDir       = file('../../shared')
}

group = 'com.exactpro.sf'
version = artifactCoreVersion
archivesBaseName = 'sailfish-js-report'

defaultTasks 'zipData'

artifactory {
    publish {
        defaults {
            // Reference to Gradle configurations defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publishConfigs('archives')
        }
    }
}


node {
    version = '10.1.0'
    npmVersion = '5.6.0'
    distBaseUrl = 'http://nodejs.org/dist'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    workDir = npmDir
}

task fixSass(type: NpmTask, dependsOn: 'npmInstall') {
	args = ['rebuild', 'node-sass']
}

task buildProd(type: NpmTask, dependsOn: ['npmInstall', 'fixSass']) {
	args = ['run', 'build']
}

task buildDev(type: NpmTask, dependsOn: ['npmInstall', 'fixSass']) {
	args = ['run', 'dev-build']
}

task devServer(type: NpmTask, dependsOn: ['npmInstall', 'fixSass']) {
	args = ['run', 'dev-server']
}

task zipData(type: Zip, dependsOn: 'buildProd') {
    classifier = "data"

    includeEmptyDirs = false
    duplicatesStrategy = 'EXCLUDE'

    from file("${project.buildDir}/out")
}

clean {
    delete project.buildDir
    delete node_modules
}

task install (type: Upload) {
    repositories.mavenInstaller {
        pom.version = project.version
        pom.artifactId = project.archivesBaseName
        pom.groupId = project.group
        pom.packaging = 'zip'
    }
    configuration = project.configurations.getByName(Dependency.ARCHIVES_CONFIGURATION)
}

uploadArchives {
    repositories.mavenDeployer {
        uniqueVersion = false // publish non unique snapshots to local repository
        repository(url: "file:${sharedDir}")
        doLast {
            // Remove any invalid maven-metadata.xml files that may have been created
            // for SNAPSHOT versions that are *not* uniquely versioned.
            pom*.each { pom ->
                if (pom.version.endsWith('-SNAPSHOT')) {
                    final File artifactDir = new File(rootProject.ext.sharedDir,
                            pom.groupId.replace('.', '/')
                                    + '/' + pom.artifactId
                                    + '/' + pom.version)
                    delete fileTree(dir: artifactDir, include: 'maven-metadata.xml*')
                }
            }
        }
    }
    doFirst {
        sharedDir.mkdirs()
    }
}

artifacts {
    archives(zipData)
}
